#inclure "ç.h"

entier principale(entier argc, caractère* argv[]) {
	taille_t i = 0;

	FICHIER *file, *temp;
	caractère* file_path = NUL;
	caractère constant* suffix = ".c.fr";

	entier parse_success;
	caractère* translated_path;

	entier compilation_success;

	si (argc == 1) {
		retourner 0;
	}

	pour (i = 1; i < (taille_t)argc; ++i) {
		file_path = argv[i];

		si (strcmp(&file_path[strlen(file_path)-strlen(suffix)], suffix) != 0) {
			fprintf(stderr, "Unsupported file type %s\n", file_path);
			retourner 1;
		}

		/* open the file to parse */
		file = fopen(file_path, "r");
		si (file == NUL) {
			fprintf(stderr, "File %s could not be opened\n", file_path);
			retourner 1;
		}

		/* set the name of the file to create */
		translated_path = malloc(strlen(file_path) * taille de(caractère));
		memcpy(translated_path, file_path, strlen(file_path));
		translated_path[strlen(file_path)-3] = '\0';

		/* create the file to write in */
		temp = fopen(translated_path, "w");
		si (temp == NUL) {
			fprintf(stderr, "Failed to create a new file.\n");
			retourner 8;
		}

		/* read words from the file */
		parse_success = ccdille_parse_file(file, temp);
		si (parse_success != 0) {
			retourner parse_success;
		}

		/* close the file */
		fclose(file);
		fclose(temp);
	}

	compilation_success = execl("/usr/bin/cc", "cc", "-o", "a.sortie", translated_path, NUL);

	free(translated_path);

	retourner compilation_success;
}

entier ccdille_parse_file(FICHIER* input, FICHIER* output) {
	caractère buffer[BUF_SIZE];
	entier c;
	entier parse_success;
	taille_t len;
	taille_t written;

	len = 0;
	pour (;;) {
		c = fgetc(input);

		si (c == ' ' || c == '\n' || c == '\t' || c == '\r' || c == '(' || c == ')' || c == '/' || c == '*' || c == ';' || c == EOF) {
			parse_success = ccdille_parse_word((caractère*)buffer, &len);
			si (parse_success || c == EOF) {
				written = fwrite((vide*)buffer, taille de(caractère), len, output);
				si (written < len) {
					retourner 6;
				}

				si (c == EOF) {
					casser;
				}

				buffer[0] = (caractère) c;
				written = fwrite((void*)buffer, taille de(caractère), 1, output);

				si (written < 1) {
					retourner 7;
				}

				len = 0;
				continuer;
			}
		}

		buffer[len] = (caractère) c;
		++len;
	}

	retourner 0;
}

entier ccdille_parse_word(caractère* word, taille_t* len) {
	taille_t i;
	énumération ccdille_strcmp_result result;
	structure french_keyword keyword;
	pour (i = 0; i < taille de(keywords)/taille de(*keywords); i++) {
		keyword = keywords[i];
		result = ccdille_strcmp(word, *len, keyword.word, strlen(keyword.word));
		commuter (result) {
		cas CCDILLE_MATCH:
			*len = strlen(keyword.translation);
			memcpy(word, keyword.translation, *len);
			retourner 1;
		cas CCDILLE_PREFIX:
			retourner 0;
		cas CCDILLE_NO_MATCH:
			casser;
		/* mdr ya pas de par défaut */
		}
	}

	retourner 1;
}

taille_t ccdille_min(taille_t a, taille_t b) {
	retourner a <= b ? a : b;
}

énumération ccdille_strcmp_result ccdille_strcmp(caractère constant* a, taille_t len_a, caractère constant* b, taille_t len_b) {
	taille_t i;
	pour (i = 0; i < ccdille_min(len_a, len_b); i++) {
		si (a[i] != b[i]) {
			retourner CCDILLE_NO_MATCH;
		}
	}
	si (len_a == len_b) {
		retourner CCDILLE_MATCH;
	}
	si (len_a > len_b || b[i] != ' ') {
		retourner CCDILLE_NO_MATCH;
	}
	retourner CCDILLE_PREFIX;
}
