#inclure "ç.h"

entier principale(entier argc, caractère* argv[]) {
	taille_t i = 0;

	FICHIER *fichier_d_entree, *fichier_de_la_traduction;
	caractère *action, *argument;
	caractère *chemin_d_entree, *chemin_de_la_sortie;
	caractère constant *suffixe = ".fr";

	entier succes_de_la_traduction;
	caractère *chemin_de_la_traduction;

	entier succes_de_la_compilation;

	si (argc == 1) {
		retourner ccdille_utilisation();
	}

	action = argv[1];
	si (strcmp(action, "traduire") != 0 && strcmp(action, "construire") != 0) {
		retourner ccdille_utilisation();
	}

	chemin_de_la_sortie = NUL;

	pour (i = 2; i < (taille_t)argc; ++i) {
		argument = argv[i];

		si (argument[0] == '-') {
			si (strcmp(argument, "-o") == 0) {
				i++;
				chemin_de_la_sortie = argv[i];
			} sinon {
				printf("Option non reconnue: %s\n", argument);
				retourner 1;
			}
			continuer;
		}
		chemin_d_entree = argument;

		si (strcmp(&chemin_d_entree[strlen(chemin_d_entree)-strlen(suffixe)], suffixe) != 0) {
			fprintf(stderr, "Type de fichier non supporté %s\n", chemin_d_entree);
			retourner 1;
		}

		/* définir le nom du fichier traduit qui sera produit */
		si (strcmp(action, "traduire") == 0 && chemin_de_la_sortie != NUL) {
			chemin_de_la_traduction = malloc((strlen(chemin_de_la_sortie) + 1) * taille de(caractère));
			memcpy(chemin_de_la_traduction, chemin_de_la_sortie, strlen(chemin_de_la_sortie) + 1);
		} sinon {
			chemin_de_la_traduction = malloc(strlen(chemin_d_entree) * taille de(caractère));
			memcpy(chemin_de_la_traduction, chemin_d_entree, strlen(chemin_d_entree));
			chemin_de_la_traduction[strlen(chemin_d_entree)-3] = '\0';
		}

		/* J4OUVRE */
		fichier_d_entree = fopen(chemin_d_entree, "r");
		si (fichier_d_entree == NUL) {
			fprintf(stderr, "Le fichier %s n'a pas pu être ouvert\n", chemin_d_entree);
			retourner 1;
		}

		/* ouvrir le fichier en écriture */
		fichier_de_la_traduction = fopen(chemin_de_la_traduction, "w");
		si (fichier_de_la_traduction == NUL) {
			fprintf(stderr, "Failed to create a new fichier.\n");
			retourner 8;
		}

		/* read words from the fichier */
		succes_de_la_traduction = ccdille_traduire_fichier(fichier_d_entree, fichier_de_la_traduction);
		si (succes_de_la_traduction != 0) {
			retourner succes_de_la_traduction;
		}

		/* JE FERME */
		fclose(fichier_d_entree);
		fclose(fichier_de_la_traduction);
	}

	succes_de_la_compilation = 0;
	si (strcmp(action, "construire") == 0) {
		si (chemin_de_la_sortie == NUL) {
			chemin_de_la_sortie = "a.sortie";
		}
		succes_de_la_compilation = execl("/usr/bin/cc", "cc", "-o", chemin_de_la_sortie, chemin_de_la_traduction, NUL);
	}
	free(chemin_de_la_traduction);

	retourner succes_de_la_compilation;
}

entier ccdille_utilisation() {
	printf("Utilisation : ç traduire|construire [-o sortie.out] [entrée...]\n");
	retourner 1;
}

entier ccdille_traduire_fichier(FICHIER* entree, FICHIER* sortie) {
	caractère tampon[TAILLE_DU_TAMPON];
	entier c;
	entier succes_de_la_traduction;
	taille_t longueur;
	taille_t ecrit;

	longueur = 0;
	pour (;;) {
		c = fgetc(entree);

		si (c == ' ' || c == '\n' || c == '\t' || c == '\r' || c == '(' || c == ')' || c == '/' || c == '*' || c == ';' || c == EOF) {
			succes_de_la_traduction = ccdille_traduire_mot((caractère*)tampon, &longueur);
			si (succes_de_la_traduction || c == EOF) {
				ecrit = fwrite((vide*)tampon, taille de(caractère), longueur, sortie);
				si (ecrit < longueur) {
					retourner 6;
				}

				si (c == EOF) {
					casser;
				}

				tampon[0] = (caractère) c;
				ecrit = fwrite((void*)tampon, taille de(caractère), 1, sortie);

				si (ecrit < 1) {
					retourner 7;
				}

				longueur = 0;
				continuer;
			}
		}

		tampon[longueur] = (caractère) c;
		++longueur;
	}

	retourner 0;
}

entier ccdille_traduire_mot(caractère* mot, taille_t* longueur) {
	taille_t i;
	énumération ccdille_comparaison_de_chaine_de_caractere_resultat resultat;
	structure mot_cle_francais_t mot_cle_francais;
	pour (i = 0; i < taille de(mot_cles_francais)/taille de(*mot_cles_francais); i++) {
		mot_cle_francais = mot_cles_francais[i];
		resultat = ccdille_comparaison_de_chaine_de_caractere(mot, *longueur, mot_cle_francais.mot, strlen(mot_cle_francais.mot));
		commuter (resultat) {
		cas CCDILLE_CORRESPONDANCE:
			*longueur = strlen(mot_cle_francais.traduction);
			memcpy(mot, mot_cle_francais.traduction, *longueur);
			retourner 1;
		cas CCDILLE_PREFIXE:
			retourner 0;
		cas CCDILLE_PAS_DE_CORRESPONDANCE:
			casser;
		/* mdr ya pas de par défaut */
		}
	}

	retourner 1;
}

taille_t ccdille_min(taille_t a, taille_t b) {
	retourner a <= b ? a : b;
}

énumération ccdille_comparaison_de_chaine_de_caractere_resultat ccdille_comparaison_de_chaine_de_caractere(caractère constant* a, taille_t taille_de_a, caractère constant* b, taille_t taille_de_b) {
	taille_t i;
	pour (i = 0; i < ccdille_min(taille_de_a, taille_de_b); i++) {
		si (a[i] != b[i]) {
			retourner CCDILLE_PAS_DE_CORRESPONDANCE;
		}
	}
	si (taille_de_a == taille_de_b) {
		retourner CCDILLE_CORRESPONDANCE;
	}
	si (taille_de_a > taille_de_b || b[i] != ' ') {
		retourner CCDILLE_PAS_DE_CORRESPONDANCE;
	}
	retourner CCDILLE_PREFIXE;
}
